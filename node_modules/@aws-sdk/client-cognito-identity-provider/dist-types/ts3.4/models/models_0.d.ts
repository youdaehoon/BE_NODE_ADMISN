import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { CognitoIdentityProviderServiceException as __BaseException } from "./CognitoIdentityProviderServiceException";
export declare enum RecoveryOptionNameType {
  ADMIN_ONLY = "admin_only",
  VERIFIED_EMAIL = "verified_email",
  VERIFIED_PHONE_NUMBER = "verified_phone_number",
}
export interface RecoveryOptionType {
  Priority: number | undefined;
  Name: RecoveryOptionNameType | string | undefined;
}
export interface AccountRecoverySettingType {
  RecoveryMechanisms?: RecoveryOptionType[];
}
export declare enum AccountTakeoverEventActionType {
  BLOCK = "BLOCK",
  MFA_IF_CONFIGURED = "MFA_IF_CONFIGURED",
  MFA_REQUIRED = "MFA_REQUIRED",
  NO_ACTION = "NO_ACTION",
}
export interface AccountTakeoverActionType {
  Notify: boolean | undefined;
  EventAction: AccountTakeoverEventActionType | string | undefined;
}
export interface AccountTakeoverActionsType {
  LowAction?: AccountTakeoverActionType;
  MediumAction?: AccountTakeoverActionType;
  HighAction?: AccountTakeoverActionType;
}
export interface NotifyEmailType {
  Subject: string | undefined;
  HtmlBody?: string;
  TextBody?: string;
}
export interface NotifyConfigurationType {
  From?: string;
  ReplyTo?: string;
  SourceArn: string | undefined;
  BlockEmail?: NotifyEmailType;
  NoActionEmail?: NotifyEmailType;
  MfaEmail?: NotifyEmailType;
}
export interface AccountTakeoverRiskConfigurationType {
  NotifyConfiguration?: NotifyConfigurationType;
  Actions: AccountTakeoverActionsType | undefined;
}
export declare enum AttributeDataType {
  BOOLEAN = "Boolean",
  DATETIME = "DateTime",
  NUMBER = "Number",
  STRING = "String",
}
export interface NumberAttributeConstraintsType {
  MinValue?: string;
  MaxValue?: string;
}
export interface StringAttributeConstraintsType {
  MinLength?: string;
  MaxLength?: string;
}
export interface SchemaAttributeType {
  Name?: string;
  AttributeDataType?: AttributeDataType | string;
  DeveloperOnlyAttribute?: boolean;
  Mutable?: boolean;
  Required?: boolean;
  NumberAttributeConstraints?: NumberAttributeConstraintsType;
  StringAttributeConstraints?: StringAttributeConstraintsType;
}
export interface AddCustomAttributesRequest {
  UserPoolId: string | undefined;
  CustomAttributes: SchemaAttributeType[] | undefined;
}
export interface AddCustomAttributesResponse {}
export declare class InternalErrorException extends __BaseException {
  readonly name: "InternalErrorException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalErrorException, __BaseException>
  );
}
export declare class InvalidParameterException extends __BaseException {
  readonly name: "InvalidParameterException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidParameterException, __BaseException>
  );
}
export declare class NotAuthorizedException extends __BaseException {
  readonly name: "NotAuthorizedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<NotAuthorizedException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class TooManyRequestsException extends __BaseException {
  readonly name: "TooManyRequestsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>
  );
}
export declare class UserImportInProgressException extends __BaseException {
  readonly name: "UserImportInProgressException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UserImportInProgressException, __BaseException>
  );
}
export interface AdminAddUserToGroupRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
  GroupName: string | undefined;
}
export declare class UserNotFoundException extends __BaseException {
  readonly name: "UserNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UserNotFoundException, __BaseException>
  );
}
export interface AdminConfirmSignUpRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
  ClientMetadata?: Record<string, string>;
}
export interface AdminConfirmSignUpResponse {}
export declare class InvalidLambdaResponseException extends __BaseException {
  readonly name: "InvalidLambdaResponseException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidLambdaResponseException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class TooManyFailedAttemptsException extends __BaseException {
  readonly name: "TooManyFailedAttemptsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TooManyFailedAttemptsException, __BaseException>
  );
}
export declare class UnexpectedLambdaException extends __BaseException {
  readonly name: "UnexpectedLambdaException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnexpectedLambdaException, __BaseException>
  );
}
export declare class UserLambdaValidationException extends __BaseException {
  readonly name: "UserLambdaValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UserLambdaValidationException, __BaseException>
  );
}
export declare enum DeliveryMediumType {
  EMAIL = "EMAIL",
  SMS = "SMS",
}
export declare enum MessageActionType {
  RESEND = "RESEND",
  SUPPRESS = "SUPPRESS",
}
export interface AttributeType {
  Name: string | undefined;
  Value?: string;
}
export interface AdminCreateUserRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
  UserAttributes?: AttributeType[];
  ValidationData?: AttributeType[];
  TemporaryPassword?: string;
  ForceAliasCreation?: boolean;
  MessageAction?: MessageActionType | string;
  DesiredDeliveryMediums?: (DeliveryMediumType | string)[];
  ClientMetadata?: Record<string, string>;
}
export interface MFAOptionType {
  DeliveryMedium?: DeliveryMediumType | string;
  AttributeName?: string;
}
export declare enum UserStatusType {
  ARCHIVED = "ARCHIVED",
  COMPROMISED = "COMPROMISED",
  CONFIRMED = "CONFIRMED",
  FORCE_CHANGE_PASSWORD = "FORCE_CHANGE_PASSWORD",
  RESET_REQUIRED = "RESET_REQUIRED",
  UNCONFIRMED = "UNCONFIRMED",
  UNKNOWN = "UNKNOWN",
}
export interface UserType {
  Username?: string;
  Attributes?: AttributeType[];
  UserCreateDate?: Date;
  UserLastModifiedDate?: Date;
  Enabled?: boolean;
  UserStatus?: UserStatusType | string;
  MFAOptions?: MFAOptionType[];
}
export interface AdminCreateUserResponse {
  User?: UserType;
}
export declare class CodeDeliveryFailureException extends __BaseException {
  readonly name: "CodeDeliveryFailureException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<CodeDeliveryFailureException, __BaseException>
  );
}
export declare class InvalidPasswordException extends __BaseException {
  readonly name: "InvalidPasswordException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidPasswordException, __BaseException>
  );
}
export declare class InvalidSmsRoleAccessPolicyException extends __BaseException {
  readonly name: "InvalidSmsRoleAccessPolicyException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidSmsRoleAccessPolicyException,
      __BaseException
    >
  );
}
export declare class InvalidSmsRoleTrustRelationshipException extends __BaseException {
  readonly name: "InvalidSmsRoleTrustRelationshipException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidSmsRoleTrustRelationshipException,
      __BaseException
    >
  );
}
export declare class PreconditionNotMetException extends __BaseException {
  readonly name: "PreconditionNotMetException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<PreconditionNotMetException, __BaseException>
  );
}
export declare class UnsupportedUserStateException extends __BaseException {
  readonly name: "UnsupportedUserStateException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnsupportedUserStateException, __BaseException>
  );
}
export declare class UsernameExistsException extends __BaseException {
  readonly name: "UsernameExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UsernameExistsException, __BaseException>
  );
}
export interface MessageTemplateType {
  SMSMessage?: string;
  EmailMessage?: string;
  EmailSubject?: string;
}
export interface AdminCreateUserConfigType {
  AllowAdminCreateUserOnly?: boolean;
  UnusedAccountValidityDays?: number;
  InviteMessageTemplate?: MessageTemplateType;
}
export interface AdminDeleteUserRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
}
export interface AdminDeleteUserAttributesRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
  UserAttributeNames: string[] | undefined;
}
export interface AdminDeleteUserAttributesResponse {}
export interface ProviderUserIdentifierType {
  ProviderName?: string;
  ProviderAttributeName?: string;
  ProviderAttributeValue?: string;
}
export interface AdminDisableProviderForUserRequest {
  UserPoolId: string | undefined;
  User: ProviderUserIdentifierType | undefined;
}
export interface AdminDisableProviderForUserResponse {}
export declare class AliasExistsException extends __BaseException {
  readonly name: "AliasExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AliasExistsException, __BaseException>
  );
}
export interface AdminDisableUserRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
}
export interface AdminDisableUserResponse {}
export interface AdminEnableUserRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
}
export interface AdminEnableUserResponse {}
export interface AdminForgetDeviceRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
  DeviceKey: string | undefined;
}
export declare class InvalidUserPoolConfigurationException extends __BaseException {
  readonly name: "InvalidUserPoolConfigurationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidUserPoolConfigurationException,
      __BaseException
    >
  );
}
export interface AdminGetDeviceRequest {
  DeviceKey: string | undefined;
  UserPoolId: string | undefined;
  Username: string | undefined;
}
export interface DeviceType {
  DeviceKey?: string;
  DeviceAttributes?: AttributeType[];
  DeviceCreateDate?: Date;
  DeviceLastModifiedDate?: Date;
  DeviceLastAuthenticatedDate?: Date;
}
export interface AdminGetDeviceResponse {
  Device: DeviceType | undefined;
}
export interface AdminGetUserRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
}
export interface AdminGetUserResponse {
  Username: string | undefined;
  UserAttributes?: AttributeType[];
  UserCreateDate?: Date;
  UserLastModifiedDate?: Date;
  Enabled?: boolean;
  UserStatus?: UserStatusType | string;
  MFAOptions?: MFAOptionType[];
  PreferredMfaSetting?: string;
  UserMFASettingList?: string[];
}
export interface AnalyticsMetadataType {
  AnalyticsEndpointId?: string;
}
export declare enum AuthFlowType {
  ADMIN_NO_SRP_AUTH = "ADMIN_NO_SRP_AUTH",
  ADMIN_USER_PASSWORD_AUTH = "ADMIN_USER_PASSWORD_AUTH",
  CUSTOM_AUTH = "CUSTOM_AUTH",
  REFRESH_TOKEN = "REFRESH_TOKEN",
  REFRESH_TOKEN_AUTH = "REFRESH_TOKEN_AUTH",
  USER_PASSWORD_AUTH = "USER_PASSWORD_AUTH",
  USER_SRP_AUTH = "USER_SRP_AUTH",
}
export interface HttpHeader {
  headerName?: string;
  headerValue?: string;
}
export interface ContextDataType {
  IpAddress: string | undefined;
  ServerName: string | undefined;
  ServerPath: string | undefined;
  HttpHeaders: HttpHeader[] | undefined;
  EncodedData?: string;
}
export interface AdminInitiateAuthRequest {
  UserPoolId: string | undefined;
  ClientId: string | undefined;
  AuthFlow: AuthFlowType | string | undefined;
  AuthParameters?: Record<string, string>;
  ClientMetadata?: Record<string, string>;
  AnalyticsMetadata?: AnalyticsMetadataType;
  ContextData?: ContextDataType;
}
export interface NewDeviceMetadataType {
  DeviceKey?: string;
  DeviceGroupKey?: string;
}
export interface AuthenticationResultType {
  AccessToken?: string;
  ExpiresIn?: number;
  TokenType?: string;
  RefreshToken?: string;
  IdToken?: string;
  NewDeviceMetadata?: NewDeviceMetadataType;
}
export declare enum ChallengeNameType {
  ADMIN_NO_SRP_AUTH = "ADMIN_NO_SRP_AUTH",
  CUSTOM_CHALLENGE = "CUSTOM_CHALLENGE",
  DEVICE_PASSWORD_VERIFIER = "DEVICE_PASSWORD_VERIFIER",
  DEVICE_SRP_AUTH = "DEVICE_SRP_AUTH",
  MFA_SETUP = "MFA_SETUP",
  NEW_PASSWORD_REQUIRED = "NEW_PASSWORD_REQUIRED",
  PASSWORD_VERIFIER = "PASSWORD_VERIFIER",
  SELECT_MFA_TYPE = "SELECT_MFA_TYPE",
  SMS_MFA = "SMS_MFA",
  SOFTWARE_TOKEN_MFA = "SOFTWARE_TOKEN_MFA",
}
export interface AdminInitiateAuthResponse {
  ChallengeName?: ChallengeNameType | string;
  Session?: string;
  ChallengeParameters?: Record<string, string>;
  AuthenticationResult?: AuthenticationResultType;
}
export declare class MFAMethodNotFoundException extends __BaseException {
  readonly name: "MFAMethodNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<MFAMethodNotFoundException, __BaseException>
  );
}
export declare class PasswordResetRequiredException extends __BaseException {
  readonly name: "PasswordResetRequiredException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<PasswordResetRequiredException, __BaseException>
  );
}
export declare class UserNotConfirmedException extends __BaseException {
  readonly name: "UserNotConfirmedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UserNotConfirmedException, __BaseException>
  );
}
export interface AdminLinkProviderForUserRequest {
  UserPoolId: string | undefined;
  DestinationUser: ProviderUserIdentifierType | undefined;
  SourceUser: ProviderUserIdentifierType | undefined;
}
export interface AdminLinkProviderForUserResponse {}
export interface AdminListDevicesRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
  Limit?: number;
  PaginationToken?: string;
}
export interface AdminListDevicesResponse {
  Devices?: DeviceType[];
  PaginationToken?: string;
}
export interface AdminListGroupsForUserRequest {
  Username: string | undefined;
  UserPoolId: string | undefined;
  Limit?: number;
  NextToken?: string;
}
export interface GroupType {
  GroupName?: string;
  UserPoolId?: string;
  Description?: string;
  RoleArn?: string;
  Precedence?: number;
  LastModifiedDate?: Date;
  CreationDate?: Date;
}
export interface AdminListGroupsForUserResponse {
  Groups?: GroupType[];
  NextToken?: string;
}
export interface AdminListUserAuthEventsRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export declare enum ChallengeName {
  Mfa = "Mfa",
  Password = "Password",
}
export declare enum ChallengeResponse {
  Failure = "Failure",
  Success = "Success",
}
export interface ChallengeResponseType {
  ChallengeName?: ChallengeName | string;
  ChallengeResponse?: ChallengeResponse | string;
}
export interface EventContextDataType {
  IpAddress?: string;
  DeviceName?: string;
  Timezone?: string;
  City?: string;
  Country?: string;
}
export declare enum FeedbackValueType {
  INVALID = "Invalid",
  VALID = "Valid",
}
export interface EventFeedbackType {
  FeedbackValue: FeedbackValueType | string | undefined;
  Provider: string | undefined;
  FeedbackDate?: Date;
}
export declare enum EventResponseType {
  Fail = "Fail",
  InProgress = "InProgress",
  Pass = "Pass",
}
export declare enum RiskDecisionType {
  AccountTakeover = "AccountTakeover",
  Block = "Block",
  NoRisk = "NoRisk",
}
export declare enum RiskLevelType {
  High = "High",
  Low = "Low",
  Medium = "Medium",
}
export interface EventRiskType {
  RiskDecision?: RiskDecisionType | string;
  RiskLevel?: RiskLevelType | string;
  CompromisedCredentialsDetected?: boolean;
}
export declare enum EventType {
  ForgotPassword = "ForgotPassword",
  PasswordChange = "PasswordChange",
  ResendCode = "ResendCode",
  SignIn = "SignIn",
  SignUp = "SignUp",
}
export interface AuthEventType {
  EventId?: string;
  EventType?: EventType | string;
  CreationDate?: Date;
  EventResponse?: EventResponseType | string;
  EventRisk?: EventRiskType;
  ChallengeResponses?: ChallengeResponseType[];
  EventContextData?: EventContextDataType;
  EventFeedback?: EventFeedbackType;
}
export interface AdminListUserAuthEventsResponse {
  AuthEvents?: AuthEventType[];
  NextToken?: string;
}
export declare class UserPoolAddOnNotEnabledException extends __BaseException {
  readonly name: "UserPoolAddOnNotEnabledException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      UserPoolAddOnNotEnabledException,
      __BaseException
    >
  );
}
export interface AdminRemoveUserFromGroupRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
  GroupName: string | undefined;
}
export interface AdminResetUserPasswordRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
  ClientMetadata?: Record<string, string>;
}
export interface AdminResetUserPasswordResponse {}
export declare class InvalidEmailRoleAccessPolicyException extends __BaseException {
  readonly name: "InvalidEmailRoleAccessPolicyException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidEmailRoleAccessPolicyException,
      __BaseException
    >
  );
}
export interface AdminRespondToAuthChallengeRequest {
  UserPoolId: string | undefined;
  ClientId: string | undefined;
  ChallengeName: ChallengeNameType | string | undefined;
  ChallengeResponses?: Record<string, string>;
  Session?: string;
  AnalyticsMetadata?: AnalyticsMetadataType;
  ContextData?: ContextDataType;
  ClientMetadata?: Record<string, string>;
}
export interface AdminRespondToAuthChallengeResponse {
  ChallengeName?: ChallengeNameType | string;
  Session?: string;
  ChallengeParameters?: Record<string, string>;
  AuthenticationResult?: AuthenticationResultType;
}
export declare class CodeMismatchException extends __BaseException {
  readonly name: "CodeMismatchException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<CodeMismatchException, __BaseException>
  );
}
export declare class ExpiredCodeException extends __BaseException {
  readonly name: "ExpiredCodeException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ExpiredCodeException, __BaseException>
  );
}
export declare class SoftwareTokenMFANotFoundException extends __BaseException {
  readonly name: "SoftwareTokenMFANotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      SoftwareTokenMFANotFoundException,
      __BaseException
    >
  );
}
export interface SMSMfaSettingsType {
  Enabled?: boolean;
  PreferredMfa?: boolean;
}
export interface SoftwareTokenMfaSettingsType {
  Enabled?: boolean;
  PreferredMfa?: boolean;
}
export interface AdminSetUserMFAPreferenceRequest {
  SMSMfaSettings?: SMSMfaSettingsType;
  SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType;
  Username: string | undefined;
  UserPoolId: string | undefined;
}
export interface AdminSetUserMFAPreferenceResponse {}
export interface AdminSetUserPasswordRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
  Password: string | undefined;
  Permanent?: boolean;
}
export interface AdminSetUserPasswordResponse {}
export interface AdminSetUserSettingsRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
  MFAOptions: MFAOptionType[] | undefined;
}
export interface AdminSetUserSettingsResponse {}
export interface AdminUpdateAuthEventFeedbackRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
  EventId: string | undefined;
  FeedbackValue: FeedbackValueType | string | undefined;
}
export interface AdminUpdateAuthEventFeedbackResponse {}
export declare enum DeviceRememberedStatusType {
  NOT_REMEMBERED = "not_remembered",
  REMEMBERED = "remembered",
}
export interface AdminUpdateDeviceStatusRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
  DeviceKey: string | undefined;
  DeviceRememberedStatus?: DeviceRememberedStatusType | string;
}
export interface AdminUpdateDeviceStatusResponse {}
export interface AdminUpdateUserAttributesRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
  UserAttributes: AttributeType[] | undefined;
  ClientMetadata?: Record<string, string>;
}
export interface AdminUpdateUserAttributesResponse {}
export interface AdminUserGlobalSignOutRequest {
  UserPoolId: string | undefined;
  Username: string | undefined;
}
export interface AdminUserGlobalSignOutResponse {}
export declare enum AdvancedSecurityModeType {
  AUDIT = "AUDIT",
  ENFORCED = "ENFORCED",
  OFF = "OFF",
}
export declare enum AliasAttributeType {
  EMAIL = "email",
  PHONE_NUMBER = "phone_number",
  PREFERRED_USERNAME = "preferred_username",
}
export interface AnalyticsConfigurationType {
  ApplicationId?: string;
  ApplicationArn?: string;
  RoleArn?: string;
  ExternalId?: string;
  UserDataShared?: boolean;
}
export interface AssociateSoftwareTokenRequest {
  AccessToken?: string;
  Session?: string;
}
export interface AssociateSoftwareTokenResponse {
  SecretCode?: string;
  Session?: string;
}
export declare class ConcurrentModificationException extends __BaseException {
  readonly name: "ConcurrentModificationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ConcurrentModificationException,
      __BaseException
    >
  );
}
export declare class ForbiddenException extends __BaseException {
  readonly name: "ForbiddenException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
}
export declare enum VerifiedAttributeType {
  EMAIL = "email",
  PHONE_NUMBER = "phone_number",
}
export interface ChangePasswordRequest {
  PreviousPassword: string | undefined;
  ProposedPassword: string | undefined;
  AccessToken: string | undefined;
}
export interface ChangePasswordResponse {}
export interface DeviceSecretVerifierConfigType {
  PasswordVerifier?: string;
  Salt?: string;
}
export interface ConfirmDeviceRequest {
  AccessToken: string | undefined;
  DeviceKey: string | undefined;
  DeviceSecretVerifierConfig?: DeviceSecretVerifierConfigType;
  DeviceName?: string;
}
export interface ConfirmDeviceResponse {
  UserConfirmationNecessary?: boolean;
}
export interface UserContextDataType {
  IpAddress?: string;
  EncodedData?: string;
}
export interface ConfirmForgotPasswordRequest {
  ClientId: string | undefined;
  SecretHash?: string;
  Username: string | undefined;
  ConfirmationCode: string | undefined;
  Password: string | undefined;
  AnalyticsMetadata?: AnalyticsMetadataType;
  UserContextData?: UserContextDataType;
  ClientMetadata?: Record<string, string>;
}
export interface ConfirmForgotPasswordResponse {}
export interface ConfirmSignUpRequest {
  ClientId: string | undefined;
  SecretHash?: string;
  Username: string | undefined;
  ConfirmationCode: string | undefined;
  ForceAliasCreation?: boolean;
  AnalyticsMetadata?: AnalyticsMetadataType;
  UserContextData?: UserContextDataType;
  ClientMetadata?: Record<string, string>;
}
export interface ConfirmSignUpResponse {}
export interface CreateGroupRequest {
  GroupName: string | undefined;
  UserPoolId: string | undefined;
  Description?: string;
  RoleArn?: string;
  Precedence?: number;
}
export interface CreateGroupResponse {
  Group?: GroupType;
}
export declare class GroupExistsException extends __BaseException {
  readonly name: "GroupExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<GroupExistsException, __BaseException>
  );
}
export declare enum IdentityProviderTypeType {
  Facebook = "Facebook",
  Google = "Google",
  LoginWithAmazon = "LoginWithAmazon",
  OIDC = "OIDC",
  SAML = "SAML",
  SignInWithApple = "SignInWithApple",
}
export interface CreateIdentityProviderRequest {
  UserPoolId: string | undefined;
  ProviderName: string | undefined;
  ProviderType: IdentityProviderTypeType | string | undefined;
  ProviderDetails: Record<string, string> | undefined;
  AttributeMapping?: Record<string, string>;
  IdpIdentifiers?: string[];
}
export interface IdentityProviderType {
  UserPoolId?: string;
  ProviderName?: string;
  ProviderType?: IdentityProviderTypeType | string;
  ProviderDetails?: Record<string, string>;
  AttributeMapping?: Record<string, string>;
  IdpIdentifiers?: string[];
  LastModifiedDate?: Date;
  CreationDate?: Date;
}
export interface CreateIdentityProviderResponse {
  IdentityProvider: IdentityProviderType | undefined;
}
export declare class DuplicateProviderException extends __BaseException {
  readonly name: "DuplicateProviderException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DuplicateProviderException, __BaseException>
  );
}
export interface ResourceServerScopeType {
  ScopeName: string | undefined;
  ScopeDescription: string | undefined;
}
export interface CreateResourceServerRequest {
  UserPoolId: string | undefined;
  Identifier: string | undefined;
  Name: string | undefined;
  Scopes?: ResourceServerScopeType[];
}
export interface ResourceServerType {
  UserPoolId?: string;
  Identifier?: string;
  Name?: string;
  Scopes?: ResourceServerScopeType[];
}
export interface CreateResourceServerResponse {
  ResourceServer: ResourceServerType | undefined;
}
export interface CreateUserImportJobRequest {
  JobName: string | undefined;
  UserPoolId: string | undefined;
  CloudWatchLogsRoleArn: string | undefined;
}
export declare enum UserImportJobStatusType {
  Created = "Created",
  Expired = "Expired",
  Failed = "Failed",
  InProgress = "InProgress",
  Pending = "Pending",
  Stopped = "Stopped",
  Stopping = "Stopping",
  Succeeded = "Succeeded",
}
export interface UserImportJobType {
  JobName?: string;
  JobId?: string;
  UserPoolId?: string;
  PreSignedUrl?: string;
  CreationDate?: Date;
  StartDate?: Date;
  CompletionDate?: Date;
  Status?: UserImportJobStatusType | string;
  CloudWatchLogsRoleArn?: string;
  ImportedUsers?: number;
  SkippedUsers?: number;
  FailedUsers?: number;
  CompletionMessage?: string;
}
export interface CreateUserImportJobResponse {
  UserImportJob?: UserImportJobType;
}
export declare enum DeletionProtectionType {
  ACTIVE = "ACTIVE",
  INACTIVE = "INACTIVE",
}
export interface DeviceConfigurationType {
  ChallengeRequiredOnNewDevice?: boolean;
  DeviceOnlyRememberedOnUserPrompt?: boolean;
}
export declare enum EmailSendingAccountType {
  COGNITO_DEFAULT = "COGNITO_DEFAULT",
  DEVELOPER = "DEVELOPER",
}
export interface EmailConfigurationType {
  SourceArn?: string;
  ReplyToEmailAddress?: string;
  EmailSendingAccount?: EmailSendingAccountType | string;
  From?: string;
  ConfigurationSet?: string;
}
export declare enum CustomEmailSenderLambdaVersionType {
  V1_0 = "V1_0",
}
export interface CustomEmailLambdaVersionConfigType {
  LambdaVersion: CustomEmailSenderLambdaVersionType | string | undefined;
  LambdaArn: string | undefined;
}
export declare enum CustomSMSSenderLambdaVersionType {
  V1_0 = "V1_0",
}
export interface CustomSMSLambdaVersionConfigType {
  LambdaVersion: CustomSMSSenderLambdaVersionType | string | undefined;
  LambdaArn: string | undefined;
}
export interface LambdaConfigType {
  PreSignUp?: string;
  CustomMessage?: string;
  PostConfirmation?: string;
  PreAuthentication?: string;
  PostAuthentication?: string;
  DefineAuthChallenge?: string;
  CreateAuthChallenge?: string;
  VerifyAuthChallengeResponse?: string;
  PreTokenGeneration?: string;
  UserMigration?: string;
  CustomSMSSender?: CustomSMSLambdaVersionConfigType;
  CustomEmailSender?: CustomEmailLambdaVersionConfigType;
  KMSKeyID?: string;
}
export declare enum UserPoolMfaType {
  OFF = "OFF",
  ON = "ON",
  OPTIONAL = "OPTIONAL",
}
export interface PasswordPolicyType {
  MinimumLength?: number;
  RequireUppercase?: boolean;
  RequireLowercase?: boolean;
  RequireNumbers?: boolean;
  RequireSymbols?: boolean;
  TemporaryPasswordValidityDays?: number;
}
export interface UserPoolPolicyType {
  PasswordPolicy?: PasswordPolicyType;
}
export interface SmsConfigurationType {
  SnsCallerArn: string | undefined;
  ExternalId?: string;
  SnsRegion?: string;
}
export interface UserAttributeUpdateSettingsType {
  AttributesRequireVerificationBeforeUpdate?: (
    | VerifiedAttributeType
    | string
  )[];
}
export declare enum UsernameAttributeType {
  EMAIL = "email",
  PHONE_NUMBER = "phone_number",
}
export interface UsernameConfigurationType {
  CaseSensitive: boolean | undefined;
}
export interface UserPoolAddOnsType {
  AdvancedSecurityMode: AdvancedSecurityModeType | string | undefined;
}
export declare enum DefaultEmailOptionType {
  CONFIRM_WITH_CODE = "CONFIRM_WITH_CODE",
  CONFIRM_WITH_LINK = "CONFIRM_WITH_LINK",
}
export interface VerificationMessageTemplateType {
  SmsMessage?: string;
  EmailMessage?: string;
  EmailSubject?: string;
  EmailMessageByLink?: string;
  EmailSubjectByLink?: string;
  DefaultEmailOption?: DefaultEmailOptionType | string;
}
export interface CreateUserPoolRequest {
  PoolName: string | undefined;
  Policies?: UserPoolPolicyType;
  DeletionProtection?: DeletionProtectionType | string;
  LambdaConfig?: LambdaConfigType;
  AutoVerifiedAttributes?: (VerifiedAttributeType | string)[];
  AliasAttributes?: (AliasAttributeType | string)[];
  UsernameAttributes?: (UsernameAttributeType | string)[];
  SmsVerificationMessage?: string;
  EmailVerificationMessage?: string;
  EmailVerificationSubject?: string;
  VerificationMessageTemplate?: VerificationMessageTemplateType;
  SmsAuthenticationMessage?: string;
  MfaConfiguration?: UserPoolMfaType | string;
  UserAttributeUpdateSettings?: UserAttributeUpdateSettingsType;
  DeviceConfiguration?: DeviceConfigurationType;
  EmailConfiguration?: EmailConfigurationType;
  SmsConfiguration?: SmsConfigurationType;
  UserPoolTags?: Record<string, string>;
  AdminCreateUserConfig?: AdminCreateUserConfigType;
  Schema?: SchemaAttributeType[];
  UserPoolAddOns?: UserPoolAddOnsType;
  UsernameConfiguration?: UsernameConfigurationType;
  AccountRecoverySetting?: AccountRecoverySettingType;
}
export declare enum StatusType {
  Disabled = "Disabled",
  Enabled = "Enabled",
}
export interface UserPoolType {
  Id?: string;
  Name?: string;
  Policies?: UserPoolPolicyType;
  DeletionProtection?: DeletionProtectionType | string;
  LambdaConfig?: LambdaConfigType;
  Status?: StatusType | string;
  LastModifiedDate?: Date;
  CreationDate?: Date;
  SchemaAttributes?: SchemaAttributeType[];
  AutoVerifiedAttributes?: (VerifiedAttributeType | string)[];
  AliasAttributes?: (AliasAttributeType | string)[];
  UsernameAttributes?: (UsernameAttributeType | string)[];
  SmsVerificationMessage?: string;
  EmailVerificationMessage?: string;
  EmailVerificationSubject?: string;
  VerificationMessageTemplate?: VerificationMessageTemplateType;
  SmsAuthenticationMessage?: string;
  UserAttributeUpdateSettings?: UserAttributeUpdateSettingsType;
  MfaConfiguration?: UserPoolMfaType | string;
  DeviceConfiguration?: DeviceConfigurationType;
  EstimatedNumberOfUsers?: number;
  EmailConfiguration?: EmailConfigurationType;
  SmsConfiguration?: SmsConfigurationType;
  UserPoolTags?: Record<string, string>;
  SmsConfigurationFailure?: string;
  EmailConfigurationFailure?: string;
  Domain?: string;
  CustomDomain?: string;
  AdminCreateUserConfig?: AdminCreateUserConfigType;
  UserPoolAddOns?: UserPoolAddOnsType;
  UsernameConfiguration?: UsernameConfigurationType;
  Arn?: string;
  AccountRecoverySetting?: AccountRecoverySettingType;
}
export interface CreateUserPoolResponse {
  UserPool?: UserPoolType;
}
export declare class UserPoolTaggingException extends __BaseException {
  readonly name: "UserPoolTaggingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UserPoolTaggingException, __BaseException>
  );
}
export declare enum OAuthFlowType {
  client_credentials = "client_credentials",
  code = "code",
  implicit = "implicit",
}
export declare enum ExplicitAuthFlowsType {
  ADMIN_NO_SRP_AUTH = "ADMIN_NO_SRP_AUTH",
  ALLOW_ADMIN_USER_PASSWORD_AUTH = "ALLOW_ADMIN_USER_PASSWORD_AUTH",
  ALLOW_CUSTOM_AUTH = "ALLOW_CUSTOM_AUTH",
  ALLOW_REFRESH_TOKEN_AUTH = "ALLOW_REFRESH_TOKEN_AUTH",
  ALLOW_USER_PASSWORD_AUTH = "ALLOW_USER_PASSWORD_AUTH",
  ALLOW_USER_SRP_AUTH = "ALLOW_USER_SRP_AUTH",
  CUSTOM_AUTH_FLOW_ONLY = "CUSTOM_AUTH_FLOW_ONLY",
  USER_PASSWORD_AUTH = "USER_PASSWORD_AUTH",
}
export declare enum PreventUserExistenceErrorTypes {
  ENABLED = "ENABLED",
  LEGACY = "LEGACY",
}
export declare enum TimeUnitsType {
  DAYS = "days",
  HOURS = "hours",
  MINUTES = "minutes",
  SECONDS = "seconds",
}
export interface TokenValidityUnitsType {
  AccessToken?: TimeUnitsType | string;
  IdToken?: TimeUnitsType | string;
  RefreshToken?: TimeUnitsType | string;
}
export interface CreateUserPoolClientRequest {
  UserPoolId: string | undefined;
  ClientName: string | undefined;
  GenerateSecret?: boolean;
  RefreshTokenValidity?: number;
  AccessTokenValidity?: number;
  IdTokenValidity?: number;
  TokenValidityUnits?: TokenValidityUnitsType;
  ReadAttributes?: string[];
  WriteAttributes?: string[];
  ExplicitAuthFlows?: (ExplicitAuthFlowsType | string)[];
  SupportedIdentityProviders?: string[];
  CallbackURLs?: string[];
  LogoutURLs?: string[];
  DefaultRedirectURI?: string;
  AllowedOAuthFlows?: (OAuthFlowType | string)[];
  AllowedOAuthScopes?: string[];
  AllowedOAuthFlowsUserPoolClient?: boolean;
  AnalyticsConfiguration?: AnalyticsConfigurationType;
  PreventUserExistenceErrors?: PreventUserExistenceErrorTypes | string;
  EnableTokenRevocation?: boolean;
  EnablePropagateAdditionalUserContextData?: boolean;
  AuthSessionValidity?: number;
}
export interface UserPoolClientType {
  UserPoolId?: string;
  ClientName?: string;
  ClientId?: string;
  ClientSecret?: string;
  LastModifiedDate?: Date;
  CreationDate?: Date;
  RefreshTokenValidity?: number;
  AccessTokenValidity?: number;
  IdTokenValidity?: number;
  TokenValidityUnits?: TokenValidityUnitsType;
  ReadAttributes?: string[];
  WriteAttributes?: string[];
  ExplicitAuthFlows?: (ExplicitAuthFlowsType | string)[];
  SupportedIdentityProviders?: string[];
  CallbackURLs?: string[];
  LogoutURLs?: string[];
  DefaultRedirectURI?: string;
  AllowedOAuthFlows?: (OAuthFlowType | string)[];
  AllowedOAuthScopes?: string[];
  AllowedOAuthFlowsUserPoolClient?: boolean;
  AnalyticsConfiguration?: AnalyticsConfigurationType;
  PreventUserExistenceErrors?: PreventUserExistenceErrorTypes | string;
  EnableTokenRevocation?: boolean;
  EnablePropagateAdditionalUserContextData?: boolean;
  AuthSessionValidity?: number;
}
export interface CreateUserPoolClientResponse {
  UserPoolClient?: UserPoolClientType;
}
export declare class InvalidOAuthFlowException extends __BaseException {
  readonly name: "InvalidOAuthFlowException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidOAuthFlowException, __BaseException>
  );
}
export declare class ScopeDoesNotExistException extends __BaseException {
  readonly name: "ScopeDoesNotExistException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ScopeDoesNotExistException, __BaseException>
  );
}
export interface CustomDomainConfigType {
  CertificateArn: string | undefined;
}
export interface CreateUserPoolDomainRequest {
  Domain: string | undefined;
  UserPoolId: string | undefined;
  CustomDomainConfig?: CustomDomainConfigType;
}
export interface CreateUserPoolDomainResponse {
  CloudFrontDomain?: string;
}
export interface DeleteGroupRequest {
  GroupName: string | undefined;
  UserPoolId: string | undefined;
}
export interface DeleteIdentityProviderRequest {
  UserPoolId: string | undefined;
  ProviderName: string | undefined;
}
export declare class UnsupportedIdentityProviderException extends __BaseException {
  readonly name: "UnsupportedIdentityProviderException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      UnsupportedIdentityProviderException,
      __BaseException
    >
  );
}
export interface DeleteResourceServerRequest {
  UserPoolId: string | undefined;
  Identifier: string | undefined;
}
export interface DeleteUserRequest {
  AccessToken: string | undefined;
}
export interface DeleteUserAttributesRequest {
  UserAttributeNames: string[] | undefined;
  AccessToken: string | undefined;
}
export interface DeleteUserAttributesResponse {}
export interface DeleteUserPoolRequest {
  UserPoolId: string | undefined;
}
export interface DeleteUserPoolClientRequest {
  UserPoolId: string | undefined;
  ClientId: string | undefined;
}
export interface DeleteUserPoolDomainRequest {
  Domain: string | undefined;
  UserPoolId: string | undefined;
}
export interface DeleteUserPoolDomainResponse {}
export interface DescribeIdentityProviderRequest {
  UserPoolId: string | undefined;
  ProviderName: string | undefined;
}
export interface DescribeIdentityProviderResponse {
  IdentityProvider: IdentityProviderType | undefined;
}
export interface DescribeResourceServerRequest {
  UserPoolId: string | undefined;
  Identifier: string | undefined;
}
export interface DescribeResourceServerResponse {
  ResourceServer: ResourceServerType | undefined;
}
export interface DescribeRiskConfigurationRequest {
  UserPoolId: string | undefined;
  ClientId?: string;
}
export declare enum CompromisedCredentialsEventActionType {
  BLOCK = "BLOCK",
  NO_ACTION = "NO_ACTION",
}
export interface CompromisedCredentialsActionsType {
  EventAction: CompromisedCredentialsEventActionType | string | undefined;
}
export declare enum EventFilterType {
  PASSWORD_CHANGE = "PASSWORD_CHANGE",
  SIGN_IN = "SIGN_IN",
  SIGN_UP = "SIGN_UP",
}
export interface CompromisedCredentialsRiskConfigurationType {
  EventFilter?: (EventFilterType | string)[];
  Actions: CompromisedCredentialsActionsType | undefined;
}
export interface RiskExceptionConfigurationType {
  BlockedIPRangeList?: string[];
  SkippedIPRangeList?: string[];
}
export interface RiskConfigurationType {
  UserPoolId?: string;
  ClientId?: string;
  CompromisedCredentialsRiskConfiguration?: CompromisedCredentialsRiskConfigurationType;
  AccountTakeoverRiskConfiguration?: AccountTakeoverRiskConfigurationType;
  RiskExceptionConfiguration?: RiskExceptionConfigurationType;
  LastModifiedDate?: Date;
}
export interface DescribeRiskConfigurationResponse {
  RiskConfiguration: RiskConfigurationType | undefined;
}
export interface DescribeUserImportJobRequest {
  UserPoolId: string | undefined;
  JobId: string | undefined;
}
export interface DescribeUserImportJobResponse {
  UserImportJob?: UserImportJobType;
}
export interface DescribeUserPoolRequest {
  UserPoolId: string | undefined;
}
export interface DescribeUserPoolResponse {
  UserPool?: UserPoolType;
}
export interface DescribeUserPoolClientRequest {
  UserPoolId: string | undefined;
  ClientId: string | undefined;
}
export interface DescribeUserPoolClientResponse {
  UserPoolClient?: UserPoolClientType;
}
export interface DescribeUserPoolDomainRequest {
  Domain: string | undefined;
}
export declare enum DomainStatusType {
  ACTIVE = "ACTIVE",
  CREATING = "CREATING",
  DELETING = "DELETING",
  FAILED = "FAILED",
  UPDATING = "UPDATING",
}
export interface DomainDescriptionType {
  UserPoolId?: string;
  AWSAccountId?: string;
  Domain?: string;
  S3Bucket?: string;
  CloudFrontDistribution?: string;
  Version?: string;
  Status?: DomainStatusType | string;
  CustomDomainConfig?: CustomDomainConfigType;
}
export interface DescribeUserPoolDomainResponse {
  DomainDescription?: DomainDescriptionType;
}
export interface ForgetDeviceRequest {
  AccessToken?: string;
  DeviceKey: string | undefined;
}
export interface ForgotPasswordRequest {
  ClientId: string | undefined;
  SecretHash?: string;
  UserContextData?: UserContextDataType;
  Username: string | undefined;
  AnalyticsMetadata?: AnalyticsMetadataType;
  ClientMetadata?: Record<string, string>;
}
export interface CodeDeliveryDetailsType {
  Destination?: string;
  DeliveryMedium?: DeliveryMediumType | string;
  AttributeName?: string;
}
export interface ForgotPasswordResponse {
  CodeDeliveryDetails?: CodeDeliveryDetailsType;
}
export interface GetCSVHeaderRequest {
  UserPoolId: string | undefined;
}
export interface GetCSVHeaderResponse {
  UserPoolId?: string;
  CSVHeader?: string[];
}
export interface GetDeviceRequest {
  DeviceKey: string | undefined;
  AccessToken?: string;
}
export interface GetDeviceResponse {
  Device: DeviceType | undefined;
}
export interface GetGroupRequest {
  GroupName: string | undefined;
  UserPoolId: string | undefined;
}
export interface GetGroupResponse {
  Group?: GroupType;
}
export interface GetIdentityProviderByIdentifierRequest {
  UserPoolId: string | undefined;
  IdpIdentifier: string | undefined;
}
export interface GetIdentityProviderByIdentifierResponse {
  IdentityProvider: IdentityProviderType | undefined;
}
export interface GetSigningCertificateRequest {
  UserPoolId: string | undefined;
}
export interface GetSigningCertificateResponse {
  Certificate?: string;
}
export interface GetUICustomizationRequest {
  UserPoolId: string | undefined;
  ClientId?: string;
}
export interface UICustomizationType {
  UserPoolId?: string;
  ClientId?: string;
  ImageUrl?: string;
  CSS?: string;
  CSSVersion?: string;
  LastModifiedDate?: Date;
  CreationDate?: Date;
}
export interface GetUICustomizationResponse {
  UICustomization: UICustomizationType | undefined;
}
export interface GetUserRequest {
  AccessToken: string | undefined;
}
export interface GetUserResponse {
  Username: string | undefined;
  UserAttributes: AttributeType[] | undefined;
  MFAOptions?: MFAOptionType[];
  PreferredMfaSetting?: string;
  UserMFASettingList?: string[];
}
export interface GetUserAttributeVerificationCodeRequest {
  AccessToken: string | undefined;
  AttributeName: string | undefined;
  ClientMetadata?: Record<string, string>;
}
export interface GetUserAttributeVerificationCodeResponse {
  CodeDeliveryDetails?: CodeDeliveryDetailsType;
}
export interface GetUserPoolMfaConfigRequest {
  UserPoolId: string | undefined;
}
export interface SmsMfaConfigType {
  SmsAuthenticationMessage?: string;
  SmsConfiguration?: SmsConfigurationType;
}
export interface SoftwareTokenMfaConfigType {
  Enabled?: boolean;
}
export interface GetUserPoolMfaConfigResponse {
  SmsMfaConfiguration?: SmsMfaConfigType;
  SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
  MfaConfiguration?: UserPoolMfaType | string;
}
export interface GlobalSignOutRequest {
  AccessToken: string | undefined;
}
export interface GlobalSignOutResponse {}
export interface InitiateAuthRequest {
  AuthFlow: AuthFlowType | string | undefined;
  AuthParameters?: Record<string, string>;
  ClientMetadata?: Record<string, string>;
  ClientId: string | undefined;
  AnalyticsMetadata?: AnalyticsMetadataType;
  UserContextData?: UserContextDataType;
}
export interface InitiateAuthResponse {
  ChallengeName?: ChallengeNameType | string;
  Session?: string;
  ChallengeParameters?: Record<string, string>;
  AuthenticationResult?: AuthenticationResultType;
}
export interface ListDevicesRequest {
  AccessToken: string | undefined;
  Limit?: number;
  PaginationToken?: string;
}
export interface ListDevicesResponse {
  Devices?: DeviceType[];
  PaginationToken?: string;
}
export interface ListGroupsRequest {
  UserPoolId: string | undefined;
  Limit?: number;
  NextToken?: string;
}
export interface ListGroupsResponse {
  Groups?: GroupType[];
  NextToken?: string;
}
export interface ListIdentityProvidersRequest {
  UserPoolId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ProviderDescription {
  ProviderName?: string;
  ProviderType?: IdentityProviderTypeType | string;
  LastModifiedDate?: Date;
  CreationDate?: Date;
}
export interface ListIdentityProvidersResponse {
  Providers: ProviderDescription[] | undefined;
  NextToken?: string;
}
export interface ListResourceServersRequest {
  UserPoolId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListResourceServersResponse {
  ResourceServers: ResourceServerType[] | undefined;
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Record<string, string>;
}
export interface ListUserImportJobsRequest {
  UserPoolId: string | undefined;
  MaxResults: number | undefined;
  PaginationToken?: string;
}
export interface ListUserImportJobsResponse {
  UserImportJobs?: UserImportJobType[];
  PaginationToken?: string;
}
export interface ListUserPoolClientsRequest {
  UserPoolId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface UserPoolClientDescription {
  ClientId?: string;
  UserPoolId?: string;
  ClientName?: string;
}
export interface ListUserPoolClientsResponse {
  UserPoolClients?: UserPoolClientDescription[];
  NextToken?: string;
}
export interface ListUserPoolsRequest {
  NextToken?: string;
  MaxResults: number | undefined;
}
export interface UserPoolDescriptionType {
  Id?: string;
  Name?: string;
  LambdaConfig?: LambdaConfigType;
  Status?: StatusType | string;
  LastModifiedDate?: Date;
  CreationDate?: Date;
}
export interface ListUserPoolsResponse {
  UserPools?: UserPoolDescriptionType[];
  NextToken?: string;
}
export interface ListUsersRequest {
  UserPoolId: string | undefined;
  AttributesToGet?: string[];
  Limit?: number;
  PaginationToken?: string;
  Filter?: string;
}
export interface ListUsersResponse {
  Users?: UserType[];
  PaginationToken?: string;
}
export interface ListUsersInGroupRequest {
  UserPoolId: string | undefined;
  GroupName: string | undefined;
  Limit?: number;
  NextToken?: string;
}
export interface ListUsersInGroupResponse {
  Users?: UserType[];
  NextToken?: string;
}
export interface ResendConfirmationCodeRequest {
  ClientId: string | undefined;
  SecretHash?: string;
  UserContextData?: UserContextDataType;
  Username: string | undefined;
  AnalyticsMetadata?: AnalyticsMetadataType;
  ClientMetadata?: Record<string, string>;
}
export interface ResendConfirmationCodeResponse {
  CodeDeliveryDetails?: CodeDeliveryDetailsType;
}
export interface RespondToAuthChallengeRequest {
  ClientId: string | undefined;
  ChallengeName: ChallengeNameType | string | undefined;
  Session?: string;
  ChallengeResponses?: Record<string, string>;
  AnalyticsMetadata?: AnalyticsMetadataType;
  UserContextData?: UserContextDataType;
  ClientMetadata?: Record<string, string>;
}
export interface RespondToAuthChallengeResponse {
  ChallengeName?: ChallengeNameType | string;
  Session?: string;
  ChallengeParameters?: Record<string, string>;
  AuthenticationResult?: AuthenticationResultType;
}
export interface RevokeTokenRequest {
  Token: string | undefined;
  ClientId: string | undefined;
  ClientSecret?: string;
}
export interface RevokeTokenResponse {}
export declare class UnauthorizedException extends __BaseException {
  readonly name: "UnauthorizedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnauthorizedException, __BaseException>
  );
}
export declare class UnsupportedOperationException extends __BaseException {
  readonly name: "UnsupportedOperationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnsupportedOperationException, __BaseException>
  );
}
export declare class UnsupportedTokenTypeException extends __BaseException {
  readonly name: "UnsupportedTokenTypeException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnsupportedTokenTypeException, __BaseException>
  );
}
export interface SetRiskConfigurationRequest {
  UserPoolId: string | undefined;
  ClientId?: string;
  CompromisedCredentialsRiskConfiguration?: CompromisedCredentialsRiskConfigurationType;
  AccountTakeoverRiskConfiguration?: AccountTakeoverRiskConfigurationType;
  RiskExceptionConfiguration?: RiskExceptionConfigurationType;
}
export interface SetRiskConfigurationResponse {
  RiskConfiguration: RiskConfigurationType | undefined;
}
export interface SetUICustomizationRequest {
  UserPoolId: string | undefined;
  ClientId?: string;
  CSS?: string;
  ImageFile?: Uint8Array;
}
export interface SetUICustomizationResponse {
  UICustomization: UICustomizationType | undefined;
}
export interface SetUserMFAPreferenceRequest {
  SMSMfaSettings?: SMSMfaSettingsType;
  SoftwareTokenMfaSettings?: SoftwareTokenMfaSettingsType;
  AccessToken: string | undefined;
}
export interface SetUserMFAPreferenceResponse {}
export interface SetUserPoolMfaConfigRequest {
  UserPoolId: string | undefined;
  SmsMfaConfiguration?: SmsMfaConfigType;
  SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
  MfaConfiguration?: UserPoolMfaType | string;
}
export interface SetUserPoolMfaConfigResponse {
  SmsMfaConfiguration?: SmsMfaConfigType;
  SoftwareTokenMfaConfiguration?: SoftwareTokenMfaConfigType;
  MfaConfiguration?: UserPoolMfaType | string;
}
export interface SetUserSettingsRequest {
  AccessToken: string | undefined;
  MFAOptions: MFAOptionType[] | undefined;
}
export interface SetUserSettingsResponse {}
export declare const RecoveryOptionTypeFilterSensitiveLog: (
  obj: RecoveryOptionType
) => any;
export declare const AccountRecoverySettingTypeFilterSensitiveLog: (
  obj: AccountRecoverySettingType
) => any;
export declare const AccountTakeoverActionTypeFilterSensitiveLog: (
  obj: AccountTakeoverActionType
) => any;
export declare const AccountTakeoverActionsTypeFilterSensitiveLog: (
  obj: AccountTakeoverActionsType
) => any;
export declare const NotifyEmailTypeFilterSensitiveLog: (
  obj: NotifyEmailType
) => any;
export declare const NotifyConfigurationTypeFilterSensitiveLog: (
  obj: NotifyConfigurationType
) => any;
export declare const AccountTakeoverRiskConfigurationTypeFilterSensitiveLog: (
  obj: AccountTakeoverRiskConfigurationType
) => any;
export declare const NumberAttributeConstraintsTypeFilterSensitiveLog: (
  obj: NumberAttributeConstraintsType
) => any;
export declare const StringAttributeConstraintsTypeFilterSensitiveLog: (
  obj: StringAttributeConstraintsType
) => any;
export declare const SchemaAttributeTypeFilterSensitiveLog: (
  obj: SchemaAttributeType
) => any;
export declare const AddCustomAttributesRequestFilterSensitiveLog: (
  obj: AddCustomAttributesRequest
) => any;
export declare const AddCustomAttributesResponseFilterSensitiveLog: (
  obj: AddCustomAttributesResponse
) => any;
export declare const AdminAddUserToGroupRequestFilterSensitiveLog: (
  obj: AdminAddUserToGroupRequest
) => any;
export declare const AdminConfirmSignUpRequestFilterSensitiveLog: (
  obj: AdminConfirmSignUpRequest
) => any;
export declare const AdminConfirmSignUpResponseFilterSensitiveLog: (
  obj: AdminConfirmSignUpResponse
) => any;
export declare const AttributeTypeFilterSensitiveLog: (
  obj: AttributeType
) => any;
export declare const AdminCreateUserRequestFilterSensitiveLog: (
  obj: AdminCreateUserRequest
) => any;
export declare const MFAOptionTypeFilterSensitiveLog: (
  obj: MFAOptionType
) => any;
export declare const UserTypeFilterSensitiveLog: (obj: UserType) => any;
export declare const AdminCreateUserResponseFilterSensitiveLog: (
  obj: AdminCreateUserResponse
) => any;
export declare const MessageTemplateTypeFilterSensitiveLog: (
  obj: MessageTemplateType
) => any;
export declare const AdminCreateUserConfigTypeFilterSensitiveLog: (
  obj: AdminCreateUserConfigType
) => any;
export declare const AdminDeleteUserRequestFilterSensitiveLog: (
  obj: AdminDeleteUserRequest
) => any;
export declare const AdminDeleteUserAttributesRequestFilterSensitiveLog: (
  obj: AdminDeleteUserAttributesRequest
) => any;
export declare const AdminDeleteUserAttributesResponseFilterSensitiveLog: (
  obj: AdminDeleteUserAttributesResponse
) => any;
export declare const ProviderUserIdentifierTypeFilterSensitiveLog: (
  obj: ProviderUserIdentifierType
) => any;
export declare const AdminDisableProviderForUserRequestFilterSensitiveLog: (
  obj: AdminDisableProviderForUserRequest
) => any;
export declare const AdminDisableProviderForUserResponseFilterSensitiveLog: (
  obj: AdminDisableProviderForUserResponse
) => any;
export declare const AdminDisableUserRequestFilterSensitiveLog: (
  obj: AdminDisableUserRequest
) => any;
export declare const AdminDisableUserResponseFilterSensitiveLog: (
  obj: AdminDisableUserResponse
) => any;
export declare const AdminEnableUserRequestFilterSensitiveLog: (
  obj: AdminEnableUserRequest
) => any;
export declare const AdminEnableUserResponseFilterSensitiveLog: (
  obj: AdminEnableUserResponse
) => any;
export declare const AdminForgetDeviceRequestFilterSensitiveLog: (
  obj: AdminForgetDeviceRequest
) => any;
export declare const AdminGetDeviceRequestFilterSensitiveLog: (
  obj: AdminGetDeviceRequest
) => any;
export declare const DeviceTypeFilterSensitiveLog: (obj: DeviceType) => any;
export declare const AdminGetDeviceResponseFilterSensitiveLog: (
  obj: AdminGetDeviceResponse
) => any;
export declare const AdminGetUserRequestFilterSensitiveLog: (
  obj: AdminGetUserRequest
) => any;
export declare const AdminGetUserResponseFilterSensitiveLog: (
  obj: AdminGetUserResponse
) => any;
export declare const AnalyticsMetadataTypeFilterSensitiveLog: (
  obj: AnalyticsMetadataType
) => any;
export declare const HttpHeaderFilterSensitiveLog: (obj: HttpHeader) => any;
export declare const ContextDataTypeFilterSensitiveLog: (
  obj: ContextDataType
) => any;
export declare const AdminInitiateAuthRequestFilterSensitiveLog: (
  obj: AdminInitiateAuthRequest
) => any;
export declare const NewDeviceMetadataTypeFilterSensitiveLog: (
  obj: NewDeviceMetadataType
) => any;
export declare const AuthenticationResultTypeFilterSensitiveLog: (
  obj: AuthenticationResultType
) => any;
export declare const AdminInitiateAuthResponseFilterSensitiveLog: (
  obj: AdminInitiateAuthResponse
) => any;
export declare const AdminLinkProviderForUserRequestFilterSensitiveLog: (
  obj: AdminLinkProviderForUserRequest
) => any;
export declare const AdminLinkProviderForUserResponseFilterSensitiveLog: (
  obj: AdminLinkProviderForUserResponse
) => any;
export declare const AdminListDevicesRequestFilterSensitiveLog: (
  obj: AdminListDevicesRequest
) => any;
export declare const AdminListDevicesResponseFilterSensitiveLog: (
  obj: AdminListDevicesResponse
) => any;
export declare const AdminListGroupsForUserRequestFilterSensitiveLog: (
  obj: AdminListGroupsForUserRequest
) => any;
export declare const GroupTypeFilterSensitiveLog: (obj: GroupType) => any;
export declare const AdminListGroupsForUserResponseFilterSensitiveLog: (
  obj: AdminListGroupsForUserResponse
) => any;
export declare const AdminListUserAuthEventsRequestFilterSensitiveLog: (
  obj: AdminListUserAuthEventsRequest
) => any;
export declare const ChallengeResponseTypeFilterSensitiveLog: (
  obj: ChallengeResponseType
) => any;
export declare const EventContextDataTypeFilterSensitiveLog: (
  obj: EventContextDataType
) => any;
export declare const EventFeedbackTypeFilterSensitiveLog: (
  obj: EventFeedbackType
) => any;
export declare const EventRiskTypeFilterSensitiveLog: (
  obj: EventRiskType
) => any;
export declare const AuthEventTypeFilterSensitiveLog: (
  obj: AuthEventType
) => any;
export declare const AdminListUserAuthEventsResponseFilterSensitiveLog: (
  obj: AdminListUserAuthEventsResponse
) => any;
export declare const AdminRemoveUserFromGroupRequestFilterSensitiveLog: (
  obj: AdminRemoveUserFromGroupRequest
) => any;
export declare const AdminResetUserPasswordRequestFilterSensitiveLog: (
  obj: AdminResetUserPasswordRequest
) => any;
export declare const AdminResetUserPasswordResponseFilterSensitiveLog: (
  obj: AdminResetUserPasswordResponse
) => any;
export declare const AdminRespondToAuthChallengeRequestFilterSensitiveLog: (
  obj: AdminRespondToAuthChallengeRequest
) => any;
export declare const AdminRespondToAuthChallengeResponseFilterSensitiveLog: (
  obj: AdminRespondToAuthChallengeResponse
) => any;
export declare const SMSMfaSettingsTypeFilterSensitiveLog: (
  obj: SMSMfaSettingsType
) => any;
export declare const SoftwareTokenMfaSettingsTypeFilterSensitiveLog: (
  obj: SoftwareTokenMfaSettingsType
) => any;
export declare const AdminSetUserMFAPreferenceRequestFilterSensitiveLog: (
  obj: AdminSetUserMFAPreferenceRequest
) => any;
export declare const AdminSetUserMFAPreferenceResponseFilterSensitiveLog: (
  obj: AdminSetUserMFAPreferenceResponse
) => any;
export declare const AdminSetUserPasswordRequestFilterSensitiveLog: (
  obj: AdminSetUserPasswordRequest
) => any;
export declare const AdminSetUserPasswordResponseFilterSensitiveLog: (
  obj: AdminSetUserPasswordResponse
) => any;
export declare const AdminSetUserSettingsRequestFilterSensitiveLog: (
  obj: AdminSetUserSettingsRequest
) => any;
export declare const AdminSetUserSettingsResponseFilterSensitiveLog: (
  obj: AdminSetUserSettingsResponse
) => any;
export declare const AdminUpdateAuthEventFeedbackRequestFilterSensitiveLog: (
  obj: AdminUpdateAuthEventFeedbackRequest
) => any;
export declare const AdminUpdateAuthEventFeedbackResponseFilterSensitiveLog: (
  obj: AdminUpdateAuthEventFeedbackResponse
) => any;
export declare const AdminUpdateDeviceStatusRequestFilterSensitiveLog: (
  obj: AdminUpdateDeviceStatusRequest
) => any;
export declare const AdminUpdateDeviceStatusResponseFilterSensitiveLog: (
  obj: AdminUpdateDeviceStatusResponse
) => any;
export declare const AdminUpdateUserAttributesRequestFilterSensitiveLog: (
  obj: AdminUpdateUserAttributesRequest
) => any;
export declare const AdminUpdateUserAttributesResponseFilterSensitiveLog: (
  obj: AdminUpdateUserAttributesResponse
) => any;
export declare const AdminUserGlobalSignOutRequestFilterSensitiveLog: (
  obj: AdminUserGlobalSignOutRequest
) => any;
export declare const AdminUserGlobalSignOutResponseFilterSensitiveLog: (
  obj: AdminUserGlobalSignOutResponse
) => any;
export declare const AnalyticsConfigurationTypeFilterSensitiveLog: (
  obj: AnalyticsConfigurationType
) => any;
export declare const AssociateSoftwareTokenRequestFilterSensitiveLog: (
  obj: AssociateSoftwareTokenRequest
) => any;
export declare const AssociateSoftwareTokenResponseFilterSensitiveLog: (
  obj: AssociateSoftwareTokenResponse
) => any;
export declare const ChangePasswordRequestFilterSensitiveLog: (
  obj: ChangePasswordRequest
) => any;
export declare const ChangePasswordResponseFilterSensitiveLog: (
  obj: ChangePasswordResponse
) => any;
export declare const DeviceSecretVerifierConfigTypeFilterSensitiveLog: (
  obj: DeviceSecretVerifierConfigType
) => any;
export declare const ConfirmDeviceRequestFilterSensitiveLog: (
  obj: ConfirmDeviceRequest
) => any;
export declare const ConfirmDeviceResponseFilterSensitiveLog: (
  obj: ConfirmDeviceResponse
) => any;
export declare const UserContextDataTypeFilterSensitiveLog: (
  obj: UserContextDataType
) => any;
export declare const ConfirmForgotPasswordRequestFilterSensitiveLog: (
  obj: ConfirmForgotPasswordRequest
) => any;
export declare const ConfirmForgotPasswordResponseFilterSensitiveLog: (
  obj: ConfirmForgotPasswordResponse
) => any;
export declare const ConfirmSignUpRequestFilterSensitiveLog: (
  obj: ConfirmSignUpRequest
) => any;
export declare const ConfirmSignUpResponseFilterSensitiveLog: (
  obj: ConfirmSignUpResponse
) => any;
export declare const CreateGroupRequestFilterSensitiveLog: (
  obj: CreateGroupRequest
) => any;
export declare const CreateGroupResponseFilterSensitiveLog: (
  obj: CreateGroupResponse
) => any;
export declare const CreateIdentityProviderRequestFilterSensitiveLog: (
  obj: CreateIdentityProviderRequest
) => any;
export declare const IdentityProviderTypeFilterSensitiveLog: (
  obj: IdentityProviderType
) => any;
export declare const CreateIdentityProviderResponseFilterSensitiveLog: (
  obj: CreateIdentityProviderResponse
) => any;
export declare const ResourceServerScopeTypeFilterSensitiveLog: (
  obj: ResourceServerScopeType
) => any;
export declare const CreateResourceServerRequestFilterSensitiveLog: (
  obj: CreateResourceServerRequest
) => any;
export declare const ResourceServerTypeFilterSensitiveLog: (
  obj: ResourceServerType
) => any;
export declare const CreateResourceServerResponseFilterSensitiveLog: (
  obj: CreateResourceServerResponse
) => any;
export declare const CreateUserImportJobRequestFilterSensitiveLog: (
  obj: CreateUserImportJobRequest
) => any;
export declare const UserImportJobTypeFilterSensitiveLog: (
  obj: UserImportJobType
) => any;
export declare const CreateUserImportJobResponseFilterSensitiveLog: (
  obj: CreateUserImportJobResponse
) => any;
export declare const DeviceConfigurationTypeFilterSensitiveLog: (
  obj: DeviceConfigurationType
) => any;
export declare const EmailConfigurationTypeFilterSensitiveLog: (
  obj: EmailConfigurationType
) => any;
export declare const CustomEmailLambdaVersionConfigTypeFilterSensitiveLog: (
  obj: CustomEmailLambdaVersionConfigType
) => any;
export declare const CustomSMSLambdaVersionConfigTypeFilterSensitiveLog: (
  obj: CustomSMSLambdaVersionConfigType
) => any;
export declare const LambdaConfigTypeFilterSensitiveLog: (
  obj: LambdaConfigType
) => any;
export declare const PasswordPolicyTypeFilterSensitiveLog: (
  obj: PasswordPolicyType
) => any;
export declare const UserPoolPolicyTypeFilterSensitiveLog: (
  obj: UserPoolPolicyType
) => any;
export declare const SmsConfigurationTypeFilterSensitiveLog: (
  obj: SmsConfigurationType
) => any;
export declare const UserAttributeUpdateSettingsTypeFilterSensitiveLog: (
  obj: UserAttributeUpdateSettingsType
) => any;
export declare const UsernameConfigurationTypeFilterSensitiveLog: (
  obj: UsernameConfigurationType
) => any;
export declare const UserPoolAddOnsTypeFilterSensitiveLog: (
  obj: UserPoolAddOnsType
) => any;
export declare const VerificationMessageTemplateTypeFilterSensitiveLog: (
  obj: VerificationMessageTemplateType
) => any;
export declare const CreateUserPoolRequestFilterSensitiveLog: (
  obj: CreateUserPoolRequest
) => any;
export declare const UserPoolTypeFilterSensitiveLog: (obj: UserPoolType) => any;
export declare const CreateUserPoolResponseFilterSensitiveLog: (
  obj: CreateUserPoolResponse
) => any;
export declare const TokenValidityUnitsTypeFilterSensitiveLog: (
  obj: TokenValidityUnitsType
) => any;
export declare const CreateUserPoolClientRequestFilterSensitiveLog: (
  obj: CreateUserPoolClientRequest
) => any;
export declare const UserPoolClientTypeFilterSensitiveLog: (
  obj: UserPoolClientType
) => any;
export declare const CreateUserPoolClientResponseFilterSensitiveLog: (
  obj: CreateUserPoolClientResponse
) => any;
export declare const CustomDomainConfigTypeFilterSensitiveLog: (
  obj: CustomDomainConfigType
) => any;
export declare const CreateUserPoolDomainRequestFilterSensitiveLog: (
  obj: CreateUserPoolDomainRequest
) => any;
export declare const CreateUserPoolDomainResponseFilterSensitiveLog: (
  obj: CreateUserPoolDomainResponse
) => any;
export declare const DeleteGroupRequestFilterSensitiveLog: (
  obj: DeleteGroupRequest
) => any;
export declare const DeleteIdentityProviderRequestFilterSensitiveLog: (
  obj: DeleteIdentityProviderRequest
) => any;
export declare const DeleteResourceServerRequestFilterSensitiveLog: (
  obj: DeleteResourceServerRequest
) => any;
export declare const DeleteUserRequestFilterSensitiveLog: (
  obj: DeleteUserRequest
) => any;
export declare const DeleteUserAttributesRequestFilterSensitiveLog: (
  obj: DeleteUserAttributesRequest
) => any;
export declare const DeleteUserAttributesResponseFilterSensitiveLog: (
  obj: DeleteUserAttributesResponse
) => any;
export declare const DeleteUserPoolRequestFilterSensitiveLog: (
  obj: DeleteUserPoolRequest
) => any;
export declare const DeleteUserPoolClientRequestFilterSensitiveLog: (
  obj: DeleteUserPoolClientRequest
) => any;
export declare const DeleteUserPoolDomainRequestFilterSensitiveLog: (
  obj: DeleteUserPoolDomainRequest
) => any;
export declare const DeleteUserPoolDomainResponseFilterSensitiveLog: (
  obj: DeleteUserPoolDomainResponse
) => any;
export declare const DescribeIdentityProviderRequestFilterSensitiveLog: (
  obj: DescribeIdentityProviderRequest
) => any;
export declare const DescribeIdentityProviderResponseFilterSensitiveLog: (
  obj: DescribeIdentityProviderResponse
) => any;
export declare const DescribeResourceServerRequestFilterSensitiveLog: (
  obj: DescribeResourceServerRequest
) => any;
export declare const DescribeResourceServerResponseFilterSensitiveLog: (
  obj: DescribeResourceServerResponse
) => any;
export declare const DescribeRiskConfigurationRequestFilterSensitiveLog: (
  obj: DescribeRiskConfigurationRequest
) => any;
export declare const CompromisedCredentialsActionsTypeFilterSensitiveLog: (
  obj: CompromisedCredentialsActionsType
) => any;
export declare const CompromisedCredentialsRiskConfigurationTypeFilterSensitiveLog: (
  obj: CompromisedCredentialsRiskConfigurationType
) => any;
export declare const RiskExceptionConfigurationTypeFilterSensitiveLog: (
  obj: RiskExceptionConfigurationType
) => any;
export declare const RiskConfigurationTypeFilterSensitiveLog: (
  obj: RiskConfigurationType
) => any;
export declare const DescribeRiskConfigurationResponseFilterSensitiveLog: (
  obj: DescribeRiskConfigurationResponse
) => any;
export declare const DescribeUserImportJobRequestFilterSensitiveLog: (
  obj: DescribeUserImportJobRequest
) => any;
export declare const DescribeUserImportJobResponseFilterSensitiveLog: (
  obj: DescribeUserImportJobResponse
) => any;
export declare const DescribeUserPoolRequestFilterSensitiveLog: (
  obj: DescribeUserPoolRequest
) => any;
export declare const DescribeUserPoolResponseFilterSensitiveLog: (
  obj: DescribeUserPoolResponse
) => any;
export declare const DescribeUserPoolClientRequestFilterSensitiveLog: (
  obj: DescribeUserPoolClientRequest
) => any;
export declare const DescribeUserPoolClientResponseFilterSensitiveLog: (
  obj: DescribeUserPoolClientResponse
) => any;
export declare const DescribeUserPoolDomainRequestFilterSensitiveLog: (
  obj: DescribeUserPoolDomainRequest
) => any;
export declare const DomainDescriptionTypeFilterSensitiveLog: (
  obj: DomainDescriptionType
) => any;
export declare const DescribeUserPoolDomainResponseFilterSensitiveLog: (
  obj: DescribeUserPoolDomainResponse
) => any;
export declare const ForgetDeviceRequestFilterSensitiveLog: (
  obj: ForgetDeviceRequest
) => any;
export declare const ForgotPasswordRequestFilterSensitiveLog: (
  obj: ForgotPasswordRequest
) => any;
export declare const CodeDeliveryDetailsTypeFilterSensitiveLog: (
  obj: CodeDeliveryDetailsType
) => any;
export declare const ForgotPasswordResponseFilterSensitiveLog: (
  obj: ForgotPasswordResponse
) => any;
export declare const GetCSVHeaderRequestFilterSensitiveLog: (
  obj: GetCSVHeaderRequest
) => any;
export declare const GetCSVHeaderResponseFilterSensitiveLog: (
  obj: GetCSVHeaderResponse
) => any;
export declare const GetDeviceRequestFilterSensitiveLog: (
  obj: GetDeviceRequest
) => any;
export declare const GetDeviceResponseFilterSensitiveLog: (
  obj: GetDeviceResponse
) => any;
export declare const GetGroupRequestFilterSensitiveLog: (
  obj: GetGroupRequest
) => any;
export declare const GetGroupResponseFilterSensitiveLog: (
  obj: GetGroupResponse
) => any;
export declare const GetIdentityProviderByIdentifierRequestFilterSensitiveLog: (
  obj: GetIdentityProviderByIdentifierRequest
) => any;
export declare const GetIdentityProviderByIdentifierResponseFilterSensitiveLog: (
  obj: GetIdentityProviderByIdentifierResponse
) => any;
export declare const GetSigningCertificateRequestFilterSensitiveLog: (
  obj: GetSigningCertificateRequest
) => any;
export declare const GetSigningCertificateResponseFilterSensitiveLog: (
  obj: GetSigningCertificateResponse
) => any;
export declare const GetUICustomizationRequestFilterSensitiveLog: (
  obj: GetUICustomizationRequest
) => any;
export declare const UICustomizationTypeFilterSensitiveLog: (
  obj: UICustomizationType
) => any;
export declare const GetUICustomizationResponseFilterSensitiveLog: (
  obj: GetUICustomizationResponse
) => any;
export declare const GetUserRequestFilterSensitiveLog: (
  obj: GetUserRequest
) => any;
export declare const GetUserResponseFilterSensitiveLog: (
  obj: GetUserResponse
) => any;
export declare const GetUserAttributeVerificationCodeRequestFilterSensitiveLog: (
  obj: GetUserAttributeVerificationCodeRequest
) => any;
export declare const GetUserAttributeVerificationCodeResponseFilterSensitiveLog: (
  obj: GetUserAttributeVerificationCodeResponse
) => any;
export declare const GetUserPoolMfaConfigRequestFilterSensitiveLog: (
  obj: GetUserPoolMfaConfigRequest
) => any;
export declare const SmsMfaConfigTypeFilterSensitiveLog: (
  obj: SmsMfaConfigType
) => any;
export declare const SoftwareTokenMfaConfigTypeFilterSensitiveLog: (
  obj: SoftwareTokenMfaConfigType
) => any;
export declare const GetUserPoolMfaConfigResponseFilterSensitiveLog: (
  obj: GetUserPoolMfaConfigResponse
) => any;
export declare const GlobalSignOutRequestFilterSensitiveLog: (
  obj: GlobalSignOutRequest
) => any;
export declare const GlobalSignOutResponseFilterSensitiveLog: (
  obj: GlobalSignOutResponse
) => any;
export declare const InitiateAuthRequestFilterSensitiveLog: (
  obj: InitiateAuthRequest
) => any;
export declare const InitiateAuthResponseFilterSensitiveLog: (
  obj: InitiateAuthResponse
) => any;
export declare const ListDevicesRequestFilterSensitiveLog: (
  obj: ListDevicesRequest
) => any;
export declare const ListDevicesResponseFilterSensitiveLog: (
  obj: ListDevicesResponse
) => any;
export declare const ListGroupsRequestFilterSensitiveLog: (
  obj: ListGroupsRequest
) => any;
export declare const ListGroupsResponseFilterSensitiveLog: (
  obj: ListGroupsResponse
) => any;
export declare const ListIdentityProvidersRequestFilterSensitiveLog: (
  obj: ListIdentityProvidersRequest
) => any;
export declare const ProviderDescriptionFilterSensitiveLog: (
  obj: ProviderDescription
) => any;
export declare const ListIdentityProvidersResponseFilterSensitiveLog: (
  obj: ListIdentityProvidersResponse
) => any;
export declare const ListResourceServersRequestFilterSensitiveLog: (
  obj: ListResourceServersRequest
) => any;
export declare const ListResourceServersResponseFilterSensitiveLog: (
  obj: ListResourceServersResponse
) => any;
export declare const ListTagsForResourceRequestFilterSensitiveLog: (
  obj: ListTagsForResourceRequest
) => any;
export declare const ListTagsForResourceResponseFilterSensitiveLog: (
  obj: ListTagsForResourceResponse
) => any;
export declare const ListUserImportJobsRequestFilterSensitiveLog: (
  obj: ListUserImportJobsRequest
) => any;
export declare const ListUserImportJobsResponseFilterSensitiveLog: (
  obj: ListUserImportJobsResponse
) => any;
export declare const ListUserPoolClientsRequestFilterSensitiveLog: (
  obj: ListUserPoolClientsRequest
) => any;
export declare const UserPoolClientDescriptionFilterSensitiveLog: (
  obj: UserPoolClientDescription
) => any;
export declare const ListUserPoolClientsResponseFilterSensitiveLog: (
  obj: ListUserPoolClientsResponse
) => any;
export declare const ListUserPoolsRequestFilterSensitiveLog: (
  obj: ListUserPoolsRequest
) => any;
export declare const UserPoolDescriptionTypeFilterSensitiveLog: (
  obj: UserPoolDescriptionType
) => any;
export declare const ListUserPoolsResponseFilterSensitiveLog: (
  obj: ListUserPoolsResponse
) => any;
export declare const ListUsersRequestFilterSensitiveLog: (
  obj: ListUsersRequest
) => any;
export declare const ListUsersResponseFilterSensitiveLog: (
  obj: ListUsersResponse
) => any;
export declare const ListUsersInGroupRequestFilterSensitiveLog: (
  obj: ListUsersInGroupRequest
) => any;
export declare const ListUsersInGroupResponseFilterSensitiveLog: (
  obj: ListUsersInGroupResponse
) => any;
export declare const ResendConfirmationCodeRequestFilterSensitiveLog: (
  obj: ResendConfirmationCodeRequest
) => any;
export declare const ResendConfirmationCodeResponseFilterSensitiveLog: (
  obj: ResendConfirmationCodeResponse
) => any;
export declare const RespondToAuthChallengeRequestFilterSensitiveLog: (
  obj: RespondToAuthChallengeRequest
) => any;
export declare const RespondToAuthChallengeResponseFilterSensitiveLog: (
  obj: RespondToAuthChallengeResponse
) => any;
export declare const RevokeTokenRequestFilterSensitiveLog: (
  obj: RevokeTokenRequest
) => any;
export declare const RevokeTokenResponseFilterSensitiveLog: (
  obj: RevokeTokenResponse
) => any;
export declare const SetRiskConfigurationRequestFilterSensitiveLog: (
  obj: SetRiskConfigurationRequest
) => any;
export declare const SetRiskConfigurationResponseFilterSensitiveLog: (
  obj: SetRiskConfigurationResponse
) => any;
export declare const SetUICustomizationRequestFilterSensitiveLog: (
  obj: SetUICustomizationRequest
) => any;
export declare const SetUICustomizationResponseFilterSensitiveLog: (
  obj: SetUICustomizationResponse
) => any;
export declare const SetUserMFAPreferenceRequestFilterSensitiveLog: (
  obj: SetUserMFAPreferenceRequest
) => any;
export declare const SetUserMFAPreferenceResponseFilterSensitiveLog: (
  obj: SetUserMFAPreferenceResponse
) => any;
export declare const SetUserPoolMfaConfigRequestFilterSensitiveLog: (
  obj: SetUserPoolMfaConfigRequest
) => any;
export declare const SetUserPoolMfaConfigResponseFilterSensitiveLog: (
  obj: SetUserPoolMfaConfigResponse
) => any;
export declare const SetUserSettingsRequestFilterSensitiveLog: (
  obj: SetUserSettingsRequest
) => any;
export declare const SetUserSettingsResponseFilterSensitiveLog: (
  obj: SetUserSettingsResponse
) => any;
