import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { CognitoIdentityProviderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CognitoIdentityProviderClient";
import { AdminUserGlobalSignOutRequest, AdminUserGlobalSignOutResponse } from "../models/models_0";
export interface AdminUserGlobalSignOutCommandInput extends AdminUserGlobalSignOutRequest {
}
export interface AdminUserGlobalSignOutCommandOutput extends AdminUserGlobalSignOutResponse, __MetadataBearer {
}
/**
 * <p>Signs out a user from all devices. You must sign <code>AdminUserGlobalSignOut</code> requests
 *             with Amazon Web Services credentials. It also invalidates all refresh tokens that Amazon Cognito has issued to
 *             a user. The user's current access and ID tokens remain valid until they expire. By
 *             default, access and ID tokens expire one hour after they're issued. A user can still use
 *             a hosted UI cookie to retrieve new tokens for the duration of the cookie validity period
 *             of 1 hour.</p>
 *         <p>Calling this action requires developer credentials.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CognitoIdentityProviderClient, AdminUserGlobalSignOutCommand } from "@aws-sdk/client-cognito-identity-provider"; // ES Modules import
 * // const { CognitoIdentityProviderClient, AdminUserGlobalSignOutCommand } = require("@aws-sdk/client-cognito-identity-provider"); // CommonJS import
 * const client = new CognitoIdentityProviderClient(config);
 * const command = new AdminUserGlobalSignOutCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link AdminUserGlobalSignOutCommandInput} for command's `input` shape.
 * @see {@link AdminUserGlobalSignOutCommandOutput} for command's `response` shape.
 * @see {@link CognitoIdentityProviderClientResolvedConfig | config} for CognitoIdentityProviderClient's `config` shape.
 *
 */
export declare class AdminUserGlobalSignOutCommand extends $Command<AdminUserGlobalSignOutCommandInput, AdminUserGlobalSignOutCommandOutput, CognitoIdentityProviderClientResolvedConfig> {
    readonly input: AdminUserGlobalSignOutCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    constructor(input: AdminUserGlobalSignOutCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CognitoIdentityProviderClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AdminUserGlobalSignOutCommandInput, AdminUserGlobalSignOutCommandOutput>;
    private serialize;
    private deserialize;
}
